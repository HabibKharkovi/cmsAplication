/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateParameterValueArgs } from "./CreateParameterValueArgs";
import { UpdateParameterValueArgs } from "./UpdateParameterValueArgs";
import { DeleteParameterValueArgs } from "./DeleteParameterValueArgs";
import { ParameterValueCountArgs } from "./ParameterValueCountArgs";
import { ParameterValueFindManyArgs } from "./ParameterValueFindManyArgs";
import { ParameterValueFindUniqueArgs } from "./ParameterValueFindUniqueArgs";
import { ParameterValue } from "./ParameterValue";
import { ParameterValueService } from "../parameterValue.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ParameterValue)
export class ParameterValueResolverBase {
  constructor(
    protected readonly service: ParameterValueService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ParameterValue",
    action: "read",
    possession: "any",
  })
  async _parameterValuesMeta(
    @graphql.Args() args: ParameterValueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ParameterValue])
  @nestAccessControl.UseRoles({
    resource: "ParameterValue",
    action: "read",
    possession: "any",
  })
  async parameterValues(
    @graphql.Args() args: ParameterValueFindManyArgs
  ): Promise<ParameterValue[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ParameterValue, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ParameterValue",
    action: "read",
    possession: "own",
  })
  async parameterValue(
    @graphql.Args() args: ParameterValueFindUniqueArgs
  ): Promise<ParameterValue | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ParameterValue)
  @nestAccessControl.UseRoles({
    resource: "ParameterValue",
    action: "create",
    possession: "any",
  })
  async createParameterValue(
    @graphql.Args() args: CreateParameterValueArgs
  ): Promise<ParameterValue> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ParameterValue)
  @nestAccessControl.UseRoles({
    resource: "ParameterValue",
    action: "update",
    possession: "any",
  })
  async updateParameterValue(
    @graphql.Args() args: UpdateParameterValueArgs
  ): Promise<ParameterValue | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ParameterValue)
  @nestAccessControl.UseRoles({
    resource: "ParameterValue",
    action: "delete",
    possession: "any",
  })
  async deleteParameterValue(
    @graphql.Args() args: DeleteParameterValueArgs
  ): Promise<ParameterValue | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
