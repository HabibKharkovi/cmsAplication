/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTestParameterArgs } from "./CreateTestParameterArgs";
import { UpdateTestParameterArgs } from "./UpdateTestParameterArgs";
import { DeleteTestParameterArgs } from "./DeleteTestParameterArgs";
import { TestParameterCountArgs } from "./TestParameterCountArgs";
import { TestParameterFindManyArgs } from "./TestParameterFindManyArgs";
import { TestParameterFindUniqueArgs } from "./TestParameterFindUniqueArgs";
import { TestParameter } from "./TestParameter";
import { TestParameterService } from "../testParameter.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TestParameter)
export class TestParameterResolverBase {
  constructor(
    protected readonly service: TestParameterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TestParameter",
    action: "read",
    possession: "any",
  })
  async _testParametersMeta(
    @graphql.Args() args: TestParameterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TestParameter])
  @nestAccessControl.UseRoles({
    resource: "TestParameter",
    action: "read",
    possession: "any",
  })
  async testParameters(
    @graphql.Args() args: TestParameterFindManyArgs
  ): Promise<TestParameter[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TestParameter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TestParameter",
    action: "read",
    possession: "own",
  })
  async testParameter(
    @graphql.Args() args: TestParameterFindUniqueArgs
  ): Promise<TestParameter | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TestParameter)
  @nestAccessControl.UseRoles({
    resource: "TestParameter",
    action: "create",
    possession: "any",
  })
  async createTestParameter(
    @graphql.Args() args: CreateTestParameterArgs
  ): Promise<TestParameter> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TestParameter)
  @nestAccessControl.UseRoles({
    resource: "TestParameter",
    action: "update",
    possession: "any",
  })
  async updateTestParameter(
    @graphql.Args() args: UpdateTestParameterArgs
  ): Promise<TestParameter | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TestParameter)
  @nestAccessControl.UseRoles({
    resource: "TestParameter",
    action: "delete",
    possession: "any",
  })
  async deleteTestParameter(
    @graphql.Args() args: DeleteTestParameterArgs
  ): Promise<TestParameter | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
