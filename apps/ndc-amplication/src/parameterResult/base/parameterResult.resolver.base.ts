/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateParameterResultArgs } from "./CreateParameterResultArgs";
import { UpdateParameterResultArgs } from "./UpdateParameterResultArgs";
import { DeleteParameterResultArgs } from "./DeleteParameterResultArgs";
import { ParameterResultCountArgs } from "./ParameterResultCountArgs";
import { ParameterResultFindManyArgs } from "./ParameterResultFindManyArgs";
import { ParameterResultFindUniqueArgs } from "./ParameterResultFindUniqueArgs";
import { ParameterResult } from "./ParameterResult";
import { ParameterResultService } from "../parameterResult.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ParameterResult)
export class ParameterResultResolverBase {
  constructor(
    protected readonly service: ParameterResultService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ParameterResult",
    action: "read",
    possession: "any",
  })
  async _parameterResultsMeta(
    @graphql.Args() args: ParameterResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ParameterResult])
  @nestAccessControl.UseRoles({
    resource: "ParameterResult",
    action: "read",
    possession: "any",
  })
  async parameterResults(
    @graphql.Args() args: ParameterResultFindManyArgs
  ): Promise<ParameterResult[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ParameterResult, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ParameterResult",
    action: "read",
    possession: "own",
  })
  async parameterResult(
    @graphql.Args() args: ParameterResultFindUniqueArgs
  ): Promise<ParameterResult | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ParameterResult)
  @nestAccessControl.UseRoles({
    resource: "ParameterResult",
    action: "create",
    possession: "any",
  })
  async createParameterResult(
    @graphql.Args() args: CreateParameterResultArgs
  ): Promise<ParameterResult> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ParameterResult)
  @nestAccessControl.UseRoles({
    resource: "ParameterResult",
    action: "update",
    possession: "any",
  })
  async updateParameterResult(
    @graphql.Args() args: UpdateParameterResultArgs
  ): Promise<ParameterResult | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ParameterResult)
  @nestAccessControl.UseRoles({
    resource: "ParameterResult",
    action: "delete",
    possession: "any",
  })
  async deleteParameterResult(
    @graphql.Args() args: DeleteParameterResultArgs
  ): Promise<ParameterResult | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
